
name: AX

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'CHANGES'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'pendingchanges/**'
      - '**.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'CHANGES'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'pendingchanges/**'
      - '**.md'
  schedule:
    # run this workflow every midnight Tuesday
    - cron:  '0 0 * * 2'

jobs:
  linux-ax-vfx:
    # VFX platform builds for OpenVDB AX
    runs-on: ubuntu-latest
    name: >
      linux-ax-vfx:${{ matrix.image }}-
      cxx:${{ matrix.compiler }}-
      ${{ matrix.build }}
    container:
      image: aswf/ci-openvdb:${{ matrix.image }}
    env:
      CXX: ${{ matrix.compiler }}
      CMAKE_BUILD_PARALLEL_LEVEL: ${{ matrix.parallel }}
    strategy:
      matrix:
        image: ['2019-clang8', '2020-clang7', '2021-clang10']
        compiler: ['clang++']
        build: ['Release']
        # Extra builds
        include:
          - image: '2020-clang7'
            compiler: 'clang++'
            build: 'Debug'
          - image: '2020-clang7'
            compiler: 'g++'
            build: 'Release'
            # disable parallel builds when using GCC due to memory limits
            parallel: 1
          - image: '2019-clang8'
            compiler: 'g++'
            build: 'Release'
            # disable parallel builds when using GCC due to memory limits
            parallel: 1
          - image: '2021-clang10'
            compiler: 'g++'
            build: 'Release'
            # disable parallel builds when using GCC due to memory limits
            parallel: 1
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: |
          ./ci/build.sh ${{ matrix.build }} "core,axcore,axbin,axtest" -DOPENVDB_CXX_STRICT=ON
      - name: test
        run: cd build && ctest -V
      - name: test_doxygen_examples
        run: ./ci/extract_test_examples.sh

  linux-ax-standalone-vfx:
    # VFX platform builds for OpenVDB AX against an existing VDB installation
    runs-on: ubuntu-latest
    name: >
      linux-ax-standalone-vfx:${{ matrix.image }}-
      cxx:${{ matrix.compiler }}-
      llvm:${{ matrix.llvm }}-
      ${{ matrix.build }}
    container:
      image: aswf/ci-openvdb:${{ matrix.image }}
    env:
      CXX: ${{ matrix.compiler }}
      CMAKE_BUILD_PARALLEL_LEVEL: ${{ matrix.parallel }}
    strategy:
      matrix:
        image: ['2019-clang6', '2019-clang7', '2019-clang8', '2019-clang9', '2020-clang7', '2021-clang10']
        compiler: ['clang++']
        build: ['Release']
        # Extra builds
        include:
          - image: '2020-clang7'
            compiler: 'g++'
            build: 'Release'
            # disable parallel builds when using GCC due to memory limits
            parallel: 1
          - image: '2020-clang7'
            compiler: 'clang++'
            build: 'Debug'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: vdb
        run: |
          ./ci/build.sh ${{ matrix.build }} "core" -DOPENVDB_CXX_STRICT=ON
          rm -rf build
      - name: build
        run: ./ci/build.sh ${{ matrix.build }} "axcore,axbin,axtest" -DOPENVDB_CXX_STRICT=ON
      - name: test
        run: cd build && ctest -V
      - name: test_doxygen_examples
        run: ./ci/extract_test_examples.sh

  macos-core:
    runs-on: macos-10.15
    name: macos-cxx:${{ matrix.compiler }}-llvm:${{ matrix.llvm }}-${{ matrix.build }}
    env:
      CXX: ${{ matrix.compiler }}
    strategy:
      matrix:
        compiler: ['clang++']
        build: ['Release']
        llvm: ['7','8','9','11','12'] #@note llvm10 never got its own brew formula...
        # Extra builds
        include:
          - compiler: 'g++'
            build: 'Release'
            llvm: '8'
          - compiler: 'clang++'
            build: 'Debug'
            llvm: '8'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: install_deps
        run: ./ci/install_macos_ax.sh ${{ matrix.llvm }}
      - name: build
        run: |
          ./ci/build.sh ${{ matrix.build }} "core,axcore,axbin,axtest" \
            -DLLVM_DIR=/usr/local/opt/llvm@${{ matrix.llvm }}/lib/cmake/llvm
      - name: test
        run: cd build && ctest -V
      - name: test_doxygen_examples
        run: ./ci/extract_test_examples.sh
